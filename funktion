#include <stdlib.h>


const byte tailleMessageMax = 30;

char message[tailleMessageMax + 1]; // +1 car on doit avoir un caractère de fin de chaîne en C, le '\0'
const char marqueurDeFin = '\n';
int tableau_1[tailleMessageMax + 1] ;
int tableau_2[tailleMessageMax + 1] ;
  
boolean commandeDisponible()
{
  static byte indexMessage = 0; // static pour se souvenir de cette variable entre 2 appels consécutifs. initialisée qu'une seule fois.
  boolean messageEnCours = true;
  
  while (Serial.available() && messageEnCours) {
    int c = Serial.read();
    if (c != -1) {
      switch (c) {
        case marqueurDeFin:
          message[indexMessage] = '\0'; // on termine la c-string
          indexMessage = 0; // on se remet au début pour la prochaine fois
          messageEnCours = false;
          break;
        case '\r': break; // ignoré
        default:
          if (indexMessage <= tailleMessageMax - 1) message[indexMessage++] = (char) c; // on stocke le caractère et on passe à la case suivante
          break;
      }
    }
  }
  return !messageEnCours;
}

void setup() {
  Serial.begin(115200);


}

void loop() {
  if (commandeDisponible()) {
    Serial.print(F("Commande à Analyser: "));
    Serial.println(message);
   int j=0;
  int r=0;
   
    for (int i=0;message[i]!='\0';i++)
   {
    if ( message[i]!=',' || message[i]!='\0')
  {
      Serial.println("etape");
    Serial.println(message[i]);
          r= r*10+((int)(message[i])-48);
           Serial.println("apresetape");
        Serial.println(r);

          
   }
   else 
       { 
     tableau_1[j]=r;
     r=0;
    j++;
     }
     
      
    }
   Serial.println(F("Convert: "));
   Serial.println(   tableau_1[0]); 
   Serial.println(   tableau_1[1]); 
   Serial.println(   tableau_1[2]);
  }
}  
